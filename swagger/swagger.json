{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Online Payment Platform API",
    "contact": {
      "email": "nbondarczuk@yahoo.com"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/health": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check server status.",
        "operationId": "HealthHandler",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/payment": {
      "post": {
        "description": "Creates a new payment. The required fields in the request input payload\nare briefly validated. The new payment is created with a status PENDING.\nThe type of the payment is REGULAR. The payment stored as it is in a collection.\nThe transaction is issued to be bank of the merchant so that the payment can be cleared.\nThe result of the transaction is stored with the payment status\nas the collection record gets updated. The payment and the transaction details\nare returned to be client plus status code of the whole operation.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment"
        ],
        "operationId": "CreatePaymentHandler",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Amount",
            "name": "amount",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Currency",
            "name": "currency",
            "in": "query"
          },
          {
            "$ref": "#/definitions/PaymentMethod",
            "x-go-name": "Method",
            "name": "method",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created",
            "name": "created",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Modified",
            "name": "modified",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/payment/{id}": {
      "get": {
        "description": "Reads one payment by id. This one must be provided in the path. An error\nis returned if it is not provided. The repository is queried for a given\npayment id. An error is retuned if it is not found. After successful\nread operation in the repository the payment details is retned with a status code\nof he whole operation.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "payment"
        ],
        "operationId": "ReadOnePaymentHandler",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the payment",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/refund/{id}": {
      "get": {
        "description": "This type code of the payment loaded from collection is validated.\nIt must be REFUND. Upon success the refund details are returned to\nthe client plus status code.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "refund"
        ],
        "summary": "Reads one refund by id. Refunds are just payments with specific type.",
        "operationId": "ReadOneRefundHandler",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the refund",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Creates a new refund using reference to the original payment. A refund is just\nanother payment record but the type is REFUND instead of REGULAR. The original\npayment must be found in the collection otherwise an error is issued. A new payment\nis cleared with a negative transaction. The repund recode and the transaction\nare retuned to the client plus status code of the whole operation.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "refund"
        ],
        "operationId": "CreateRefundHandler",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "PaymentMethod": {
      "type": "object",
      "properties": {
        "cardno": {
          "type": "string",
          "x-go-name": "CardNo"
        },
        "ccv": {
          "type": "string",
          "x-go-name": "CCV"
        },
        "expirtdate": {
          "type": "string",
          "x-go-name": "ExpiryDate"
        },
        "nameandsurename": {
          "type": "string",
          "x-go-name": "NameAndSurname"
        }
      },
      "x-go-package": "oppapi/internal/model"
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}